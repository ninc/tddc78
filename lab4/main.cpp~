// MÃ¤dz super duper particle simulation (MSDPS)


#include <iostream>
#include "physics.h"
#include "definitions.h"
#include "coordinate.h"
#include <math.h>
#include <time.h>

using namespace std;

#define max_vel 50
#define max_l 20
#define n 100

//Setup needed data structes for the simulation
bool init_particles3(particle_t *particles)
{
  //allocate memory
  float r;
  float phi;

  time_t t;
  time(&t);
  srand(t);

  double probability = 0;
  for (int i = 0; i < n; i++){
    //randomize the velocity
    probability = rand() /(double)RAND_MAX;
    r= probability*max_vel;
    probability = rand() /(double)RAND_MAX;
    phi= probability*2*PI;
    particles[i].pcord.vx = r*cos(phi);
    particles[i].pcord.vy = r*sin(phi);
    //randomize the coordinates for the particles
    probability = rand() /(double)RAND_MAX;
    particles[i].pcord.x = probability* max_l;
    probability = rand() /(double)RAND_MAX;
    particles[i].pcord.y = probability* max_l;
  }
  return true;
}

// Simulate particle pressure
int simulate(int t, particle_t particles[n])
{
  //begin simulation
  float collision = 0;
  for(int i=0;i<t;i++=){
  //main loop
    for(int j=0;j<n;j++){
      for(int k=j+1;k<n;k++){
	 //Check for collisions
	collision = collide(particles[j], particles[k]);
	//if no collision
	if(collision == -1){
	  feuler(particles[j], i);
	}
	//collision
	else{
	  interact(particles[j], particles[k], collision);
	}	
      }
    }
  //Move particles that havn't colided
  
  // Check for wall interaction and add the momentum

  // Communicate if needed

  }

  return 0;
}



// Calculate the pressure and verify that the calculations are correct
bool calc_pressure()
{

  return true;
}

int main (int argc, char ** argv) {
  int t = (int) argv[1];
  //particle_t *particles[n];
  particle_t particles[n];
  cout<< "begin init particles" << endl;
  // Initialize simulation
  init_particles3(particles);
  cout<< "finished init particles" << endl;
  
  simulate(t, particles);

  //calc_pressure();
  //clea
  //clean_particles(particles);
  return 0;
}
